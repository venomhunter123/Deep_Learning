import numpy as np
X = np.array([[0, 0], [0, 1], [1, 0], [1, 1]])
Y = np.array([[0], [1], [1], [0]])
np.random.seed(42)
weights_input_hidden = np.random.uniform(size=(2, 2))
weights_hidden_output = np.random.uniform(size=(2, 1))
bias_hidden = np.random.uniform(size=(1, 2))
bias_output = np.random.uniform(size=(1, 1))
def sigmoid(x):
    return 1 / (1 + np.exp(-x))
def sigmoid_derivative(x):
    return x * (1 - x)
lr, epochs = 1.5, 10000
print("Initial weights and biases:", weights_input_hidden, weights_hidden_output, bias_hidden, bias_output, sep="\n")
for epoch in range(epochs):
    hidden_output = sigmoid(np.dot(X, weights_input_hidden) + bias_hidden)
    final_output = sigmoid(np.dot(hidden_output, weights_hidden_output) + bias_output)
    error = Y - final_output
    d_output = error * sigmoid_derivative(final_output)
    d_hidden_layer = (d_output.dot(weights_hidden_output.T)) * sigmoid_derivative(hidden_output)
    weights_hidden_output += hidden_output.T.dot(d_output) * lr
    bias_output += np.sum(d_output, axis=0) * lr
    weights_input_hidden += X.T.dot(d_hidden_layer) * lr
    bias_hidden += np.sum(d_hidden_layer, axis=0) * lr
    if epoch % 2000 == 0:
        print(f"Epoch {epoch} Error {np.mean(np.abs(error)):.4f}")
print("Final weights and biases:", weights_input_hidden, weights_hidden_output, bias_hidden, bias_output, sep="\n")
print("XOR gate predictions:")
for i in range(len(X)):
    hidden_output = sigmoid(np.dot(X[i], weights_input_hidden) + bias_hidden)
    final_output = sigmoid(np.dot(hidden_output, weights_hidden_output) + bias_output)
    print(f"Input: {X[i]} Output: {np.round(final_output[0])}")
